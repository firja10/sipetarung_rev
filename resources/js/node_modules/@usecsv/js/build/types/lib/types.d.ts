declare type OnRecordRowData = {
    row: number;
    data: {
        [columnName: string]: {
            value: string | number;
            isValid: boolean;
        };
    };
};
declare type OnRecordRowResponse = {
    row: number;
    data: {
        [columnName: string]: Array<{
            message: string;
            level: "error" | "info" | "healing";
        }>;
    };
};
export declare type onRecordsInitialType = ({ uploadId, fileName, importerId, batch, user, metadata, rows, }: {
    uploadId: string;
    fileName: string;
    importerId: string;
    batch: {
        index: number;
        count: number;
        totalRows: number;
    };
    user?: Record<string, string | number> | null;
    metadata?: Record<string, string | number> | null;
    rows: OnRecordRowData[];
}) => Promise<OnRecordRowResponse[] | void> | OnRecordRowResponse[] | void;
export declare type onRecordEditType = ({ uploadId, fileName, importerId, user, metadata, row, }: {
    uploadId: string;
    fileName: string;
    importerId: string;
    user?: Record<string, string | number> | null;
    metadata?: Record<string, string | number> | null;
    row: OnRecordRowData;
}) => Promise<OnRecordRowResponse | void> | OnRecordRowResponse | void;
export declare type CsvData = {
    uploadId: number;
    fileName: string;
    rows: Record<string, string | number>[];
    user?: Record<string, string | number>;
    metadata?: Record<string, string | number>;
};
export {};
//# sourceMappingURL=types.d.ts.map